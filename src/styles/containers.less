/*  ==========================================
    Containers and layout helpers
    ========================================== */

[widget] {
  .clearfix;
}

.block {
  display: block;
}

.relative-wrapper {
  position: relative;
  .clearfix;
}

.block--left {
  &:extend(.block);
  float: left;
  text-align: left;
}

.block--center {
  &:extend(.block);
  text-align: center;
  > div {
    display: inline-block;
  }
}

.block--right {
  &:extend(.block);
  float: right;
  text-align: right;
}

.wrapper {
  position: relative;
  max-width: @gridWidth - @gridGap;
  margin: 0 auto;
}

// MOBILE SPECIFIC STYLES
@media only screen and @lessThenTablet {
  .grid,
  [grid] {
    margin-left: 10px;
    margin-right: 10px;
  }
}

@media only screen and @moreThenMobile and @lessThenDesktop {
  .generate-fluid-grid(12);
}

// DESKTOP STYLES
@media only screen and @moreThenTablet {
  // Calling the grid mixin
  .generate-grid(@gridWidth, @gridGap, @gridColumnCount);
}


/*  ==========================================
    GRID generating mixin
    ========================================== */

////////////////////////
// Desktop grid mixin //
////////////////////////
.generate-grid(@full, @gap, @cols){
  .grid-row,
  [grid-row] {
    clear: both;
    .clearfix;
  }

  .grid-wrapper {
    max-width: @full;
    margin-left: auto;
    margin-right: auto;
    .clearfix;
  }

  .grid,
  [grid] {
    float: left;
    margin-left: @gap / 2;
    margin-right: @gap / 2;
  }

  .grid-outer {
    float: left;
    margin-left: 0;
    margin-right: 0;
  }

  .grid-img {
    max-width: 100%;
    height: auto;
  }

  .grid-element-loop(@i) when (@i =< @cols){

    [grid="@{i}"]{
      &:extend(.grid);
      width: round(((@full - (@cols * @gap)) / @cols) * @i + (@gap * (@i - 1)));
    }
    // Recursive call with index incrementation
    .grid-element-loop(@i + 1);
  }

  // Init grid
  .grid-element-loop(1);

  .grid-wrap-loop(@i) when (@i =< @cols){

    [grid-container="@{i}"]{
      &:extend(.grid-outer);
      width: round(((@full - (@cols * @gap)) / @cols) * @i + (@gap * @i));
    }
    // Recursive call with index incrementation
    .grid-wrap-loop(@i + 1);
  }

  // Init grid-wrap
  .grid-wrap-loop(1);

}

///////////////////////
// Tablet grid mixin //
///////////////////////
.generate-fluid-grid(@cols){

  .grid,
  [grid] {
    float: left;
    margin-left: 1%;
    margin-right: 1%;
  }

  .grid-fluid-element-loop(@i) when (@i =< @cols){
    [grid="@{i}"]{
      width: ((100 - (@cols * 2%)) / @cols ) * @i + (2 * (@i - 1));
    }
    .grid-fluid-element-loop(@i + 1);
  }
  // Fluid grid initiation
  .grid-fluid-element-loop(1);

  [grid-container] {
    width: 100%;
  }
}

///////////////////////////////////
// Grid mixins without recursion //
///////////////////////////////////
.grid-element(@i; @float: left){
  float: @float;
  width: round(((@gridWidth - (@gridColumnCount * @gridGap)) / @gridColumnCount) * @i + (@gridGap * (@i - 1)));
  margin-left: @gridGap / 2;
  margin-right: @gridGap / 2;
}

.grid-fluid-element(@i; @gap: 2%; @float: left){
  float: @float;
  width: ((100 - (@gridColumnCount * @gap)) / @gridColumnCount) * @i + (@gap * (@i - 1));
  margin-left: @gap / 2;
  margin-right: @gap / 2;
}

.grid-wrap(@i; @float: left){
  float: @float;
  width: round(((@gridWidth - (@gridColumnCount * @gridGap)) / @gridColumnCount) * @i + (@gridGap * @i));
}

.grid-width(@i){
  @width: round(((@gridWidth - (@gridColumnCount * @gridGap)) / @gridColumnCount) * @i + (@gridGap * @i));
}

.grid-fluid-width(@i; @gap: 2%;){
  @width: round(((100 - (@gridColumnCount * @gap)) / @gridColumnCount) * @i + (@gap * @i));
}

