/*  ==========================================
    Containers and layout helpers
    ========================================== */

[widget] {
  .clearfix;
}

.wrapper {
  position: relative;
  max-width: 960px;
  margin: 0 auto;
}

.block {
  display: block;
}

.block--left {
  &:extend(.block);
  float: left;
  text-align: left;
}

.block--center {
  &:extend(.block);
  text-align: center;
  > div {
    display: inline-block;
  }
}

.block--right {
  &:extend(.block);
  float: right;
  text-align: right;
}

// Grid mixin
.generate-grid(@full, @gap, @cols){
  .grid-row {
    clear: both;
    .clearfix;
  }

  .grid-wrapper {
    width: @full;
    margin-left: auto;
    margin-right: auto;
    .clearfix;
  }

  .grid {
    margin-left: @gap / 2;
    margin-right: @gap / 2;
    float: left;
  }

  .grid-img {
    max-width: 100%;
    height: auto;
  }

  .grid-el(@i) when (@i =< @cols){

    .grid-@{i}{
      &:extend(.grid);
      width: round(((@full - (@cols * @gap)) / @cols) * @i + (@gap * (@i - 1)));
    }
    // Recursive call with index incrementation
    .grid-el(@i + 1);
  }

  .grid-el(1);
}

// Calling the grid mixin
.generate-grid(@gridWidth, @gridGap, @gridColumnCount);
